import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import MetadataModel from "../Models/MetadataModel";

/**
 * Adds a new metadata object to the current state array.
 * 
 * @param currentState - The current array of metadata.
 * @param action - The action containing the new metadata object to add.
 * @returns The updated state array with the new metadata added.
 */
function addOne(currentState: MetadataModel[], action: PayloadAction<MetadataModel | MetadataModel[]>): MetadataModel[] {
    // Check if the payload is an array or a single object
    if (Array.isArray(action.payload)) {
        return [...currentState, ...action.payload]; // Add all items from the array
    } else {
        return [...currentState, action.payload]; // Add the single item
    }
}

/**
 * Clears the current state by resetting it to an empty array.
 * 
 * @param currentState - The current array of metadata.
 * @returns An empty array, representing the cleared state.
 */
function clear(currentState: MetadataModel[]): MetadataModel[] {
    return []; // Reset state to an empty array.
}

/**
 * Slice for managing metadata-related state, including actions to add and clear metadata.
 */
const metadataSlice = createSlice({
    name: "metadata", 
    initialState: [] as MetadataModel[],
    reducers: { addOne, clear }
});

/**
 * Exported action creators generated by the metadata slice.
 * These can be dispatched to modify the global state.
 */
export const metadataActionCreators = metadataSlice.actions;

/**
 * The reducer to be used by the Redux store to manage the metadata state.
 */
export const metadataReducersContainer = metadataSlice.reducer;